datW <- read.csv("y:\\Students\\atekle\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), skip=3, header=FALSE)
#data without skipping first 3 rows
datWwithoutskip <- read.csv("y:\\Students\\atekle\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), header=FALSE)
#get sensor info from file
# this data table will contain all relevent units
sensorInfo <-   read.csv("y:\\Students\\atekle\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), nrows=2)
#get column names from sensorInfo table
# and set weather station colnames  to be the same
colnames(datW) <-   colnames(sensorInfo)
library(lubridate)
#convert to standardized format
#date format is m/d/y
dates <- mdy_hm(datW$timestamp, tz= "America/New_York")
#calculate day of year
datW$doy <- yday(dates)
#calculate hour in the day
datW$hour <- hour(dates) + (minute(dates)/60)
#calculate decimal day of year
datW$DD <- datW$doy + (datW$hour/24)
#see how many values have missing data for each sensor observation
#air temperature
length(which(is.na(datW$air.temperature)))
## [1] 0
#wind speed
length(which(is.na(datW$wind.speed)))
## [1] 0
#precipitation
length(which(is.na(datW$precipitation)))
## [1] 0
#soil temperature
length(which(is.na(datW$soil.moisture)))
## [1] 707
#soil moisture
length(which(is.na(datW$soil.temp)))
## [1] 707
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$air.temperature, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (degrees C)")
#changing below freezing point values to NA
datW$air.tempQ1 <- ifelse(datW$air.temperature < 0, NA, datW$air.temperature)
#check the values at the extreme range of the data
#and throughout the percentiles
quantile(datW$air.tempQ1)
#look at days with really low air temperature
datW[datW$air.tempQ1 < 8,]
#look at days with really high air temperature
datW[datW$air.tempQ1 > 33,]
datW <- read.csv("y:\\Students\\atekle\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), skip=3, header=FALSE)
#data without skipping first 3 rows
datWwithoutskip <- read.csv("y:\\Students\\atekle\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), header=FALSE)
#get sensor info from file
# this data table will contain all relevent units
sensorInfo <-   read.csv("y:\\Students\\atekle\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), nrows=2)
#get column names from sensorInfo table
# and set weather station colnames  to be the same
colnames(datW) <-   colnames(sensorInfo)
library(lubridate)
#convert to standardized format
#date format is m/d/y
dates <- mdy_hm(datW$timestamp, tz= "America/New_York")
#calculate day of year
datW$doy <- yday(dates)
#calculate hour in the day
datW$hour <- hour(dates) + (minute(dates)/60)
#calculate decimal day of year
datW$DD <- datW$doy + (datW$hour/24)
#see how many values have missing data for each sensor observation
#air temperature
length(which(is.na(datW$air.temperature)))
## [1] 0
#wind speed
length(which(is.na(datW$wind.speed)))
## [1] 0
#precipitation
length(which(is.na(datW$precipitation)))
## [1] 0
#soil temperature
length(which(is.na(datW$soil.moisture)))
## [1] 707
#soil moisture
length(which(is.na(datW$soil.temp)))
## [1] 707
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$air.temperature, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (degrees C)")
#changing below freezing point values to NA
datW$air.tempQ1 <- ifelse(datW$air.temperature < 0, NA, datW$air.temperature)
#check the values at the extreme range of the data
#and throughout the percentiles
quantile(datW$air.tempQ1)
#look at days with really low air temperature
datW[datW$air.tempQ1 < 8,]
#look at days with really high air temperature
datW[datW$air.tempQ1 > 33,]
View(datW)
lightscale <- (max(datW$precipitation)/max(datW$lightning.acvitivy)) * datW$lightning.acvitivy
#make the plot with precipitation and lightning activity marked
#make it empty to start and add in features
plot(datW$DD , datW$precipitation, xlab = "Day of Year", ylab = "Precipitation & lightning",
type="n")
#plot precipitation points only when there is precipitation
#make the points semi-transparent
points(datW$DD[datW$precipitation > 0], datW$precipitation[datW$precipitation > 0],
col= rgb(95/255,158/255,160/255,.5), pch=15)
lightscale
#Question 6
#filter out storms in wind and air temperature measurements
# filter all values with lightning that coincides with rainfall greater than 2mm or only rainfall over 5 mm.
#create a new air temp column
datW$air.tempQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$air.tempQ1))
?col
?rgb
c<-c(1,2,3)
b<-c(1,2,3)
c==b
all.equal(c,b)
b<-c(1,2,NA)
all.equal(c,b)
c<-c(1,2,NA)
all.equal(c,b)
assert(all.equal(c,b),"They are not equal")
assert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
assert(all.equal(c,b),"They are not equal")
c<-c(1,2,3)
assert(all.equal(c,b),"They are not equal")
x<-assert(all.equal(c,b),"They are not equal")
x
ssert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
#check how the statement works
#evaluate a false statement
assert(1 == 2, "error: unequal values")
typeof(1==2)
typeof(all.equal(c,b))
all.equal(c,b)
ssert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
#check how the statement works
#evaluate a false statement
assert(1 == 2, "error: unequal values")
ssert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
#check how the statement works
#evaluate a false statement
assert(1 == 2, "error: unequal values")
x<-assert(isTRUE(all.equal(c,b)),"They are not equal")
datW$DD[lightscale > 0]
dat$lightscale <- (max(datW$precipitation)/max(datW$lightning.acvitivy)) * datW$lightning.acvitivy
datW$lightscale <- (max(datW$precipitation)/max(datW$lightning.acvitivy)) * datW$lightning.acvitivy
datW$DD[datW$lightscale > 0]
assert(isTRUE(all.equal(datW$DD[lightscale > 0],datW$DD[datW$lightscale > 0])),"They are not equal")
b<-assert(isTRUE(all.equal(datW$DD[lightscale > 0],datW$DD[datW$lightscale > 0])),"They are not equal")
b
typeof(datW$DD[datW$lightscale > 0])
datW$DD[datW$lightscale > 0]==datW$DD[lightscale > 0]
all.equal(datW$DD[datW$lightscale > 0]==datW$DD[lightscale > 0])
all.equal(datW$DD[datW$lightscale > 0],datW$DD[lightscale > 0])
assert(isTRUE(all.equal(datW$DD[lightscale > 0],datW$DD[datW$lightscale > 0])),"They are not equal")
assert(isTRUE(all.equal(datW$DD[lightscale > 0],datW$DD[datW$lightscale > 0])),"They are not equal")
b<-[1,2,2.4]
typeof(b)
assert(len(datW$DD[lightscale > 0])==len(datW$DD[datW$lightscale > 0]),"They are not equal")
assert(length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0]),"They are not equal")
x<-assert(length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0]),"They are not equal")
x
x<-assert(length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0]),"They are not equal")
length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0
length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0)
length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0)
length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0])
assert(length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0]),"They are not equal")
assert((length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0])),"They are not equal")
assert((length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0])),"They are not equal")
assert(1==2,"They are not equal")
assert(2==2,"They are not equal")
datW$wind.speed2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$wind.speed
))
assert(length(datW$wind.speed)>=length(datW$wind.speed2),"The subset cannot be bigger.")
assert((length(datW$DD[lightscale > 0])==length(datW$DD[datW$lightscale > 0])),"They are not equal")
plot(datW$DD,datW$wind.speed2)
Avg.air.temp<-avg(datW$air.temperature)
Avg.wind.speed<-avg(datW$wind.speed)
Avg.soil.moisture<-avg(datW$soil.moisture)
Avg.soil.temp<-avg(datW$soil.temp)
Avg.air.temp<-mean(datW$air.temperature)
Avg.wind.speed<-mean(datW$wind.speed)
Avg.soil.moisture<-mean(datW$soil.moisture)
Avg.soil.temp<-mean(datW$soil.temp)
Avg.air.temp
plot(datW$DD,datW$wind.speed2,xlab="Day of year",ylab = "wind speed in mph",type="b")
